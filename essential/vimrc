set encoding=utf-8

"Export Environment variables -------------------------------------------------
let $FZF_DEFAULT_COMMAND='ag --hidden --ignore .git -g ""'

"Plugins ----------------------------------------------------------------------
call plug#begin()
Plug 'scrooloose/nerdtree',             {'on': ['NERDTreeToggle', 'NERDTreeClose']}
Plug 'Xuyuanp/nerdtree-git-plugin',     {'on': 'NERDTreeToggle'}
Plug 'junegunn/fzf',                    {'dir': '~/.fzf', 'do': './install --all'}
Plug 'junegunn/fzf.vim'
Plug 'vim-airline/vim-airline'
Plug 'Valloric/YouCompleteMe'
Plug 'rdnetto/YCM-Generator',           {'branch': 'develop', 'on': 'YcmGenerateConfig'}
Plug 'morhetz/gruvbox'
Plug 'benmills/vimux'
Plug 'ntpeters/vim-better-whitespace'
Plug 'honza/vim-snippets'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'
Plug 'matze/vim-move'
Plug 'vim-scripts/DoxygenToolkit.vim',    {'on': 'Dox'}
Plug 'vim-scripts/Conque-GDB',          {'on': 'ConqueGdb'}
Plug 'pangloss/vim-javascript'
Plug 'leafgarland/typescript-vim'
Plug 'rust-lang/rust.vim'
Plug 'qpkorr/vim-bufkill'
Plug 'makerj/vim-transit'
Plug 'makerj/vim-pdf'
Plug 'makerj/vim-numbering'
Plug 'makerj/vim-parsenumber' " Show number literal in various perspective
Plug 'makerj/vim-cpp-enhanced-highlight'
Plug 'makerj/felis-cat-igirisu-toast-express' " ESC to english mode for fcitx IM
Plug 'vim-scripts/YankRing.vim' " Circular clipboard
Plug 'makerj/tagbar' " Source outline viewer (ctags required)
Plug 'mrk21/yaml-vim'
Plug 'lmeijvogel/vim-yaml-helper'
Plug 'othree/eregex.vim' " replace vim search pattern to perl regex
Plug 'pboettch/vim-cmake-syntax'
Plug 'vim-scripts/VisIncr' " increase/decrease number, date
Plug 'DougBeney/image.vim'

call plug#end()

"Basic Setups -----------------------------------------------------------------
set number
set softtabstop=4
set tabstop=4
set shiftwidth=4 "set expandtab " use whitespace for tab character
set cindent
set incsearch
set hlsearch
set ignorecase
set smartcase
set laststatus=2
set title
set smartindent
set autoindent
set autowriteall
set autoread              " automatic reload every `updatetime` ms
set updatetime=1000       " automatic reload every `updatetime` ms
au CursorHold * checktime " automatic reload every `updatetime` ms
set history=1000 " command history depth
set undolevels=1000
set nobackup
set noswapfile
set visualbell
set noerrorbells
set cursorline
set clipboard=unnamedplus
set mouse=a
syntax on
let g:load_doxygen_syntax=1
if filereadable(expand("$HOME/.vim/plugged/gruvbox/colors/gruvbox.vim"))
    colorscheme gruvbox
endif
set bg=dark
"Remember last buffer position
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

"Plugin Setups -----------------------------------------------------------------
let g:tagbar_expand = 1
let g:tagbar_autoshowtag = 1

let g:transit_src = 'ko'
let g:transit_dst = 'en'

let g:ycm_global_ycm_extra_conf = expand("$HOME/.vim/ycm_extra_conf.py")
let g:ycm_confirm_extra_conf = 0
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_python_binary_path = 'python3'
let g:ycm_rust_src_path = expand("$HOME/.cargo/rust/src")
let g:ycm_complete_in_comments = 1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_max_diagnostics_to_display = 100

let g:ConqueGdb_Leader = '\'
"ConqueGdb_Leader r => run
"ConqueGdb_Leader b => break-create
"ConqueGdb_Leader d => break-delete
"ConqueGdb_Leader s => step
"ConqueGdb_Leader n => next
"ConqueGdb_Leader p => print value
"
let g:airline#extensions#tabline#enabled = 1

let g:move_key_modifier = 'C'

let g:DoxygenToolkit_briefTag_pre=""

let g:yankring_history_dir=expand("$HOME/.vim")

let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_ngdoc = 1
let g:javascript_plugin_flow = 1

let g:better_whitespace_enabled=1
let g:strip_whitespace_on_save=1
let g:strip_whitespace_confirm=0

let g:vim_yaml_helper#auto_display_path = 1

autocmd FileType c setlocal commentstring=//\ %s
autocmd FileType c set completeopt-=preview
autocmd FileType cpp setlocal commentstring=//\ %s
autocmd FileType cmake setlocal commentstring=#\ %s

"Shortcuts --------------------------------------------------------------------
let mapleader=","
"Shortcuts :: Plugin
noremap <F2> :NERDTreeToggle<CR> :vertical resize 45<CR>
noremap <F3> :TagbarToggle<CR>

func! s:SmartBuild(use_input)
    " Build System aware building
    :wa

    if ! a:use_input
        let l:target = ''
    else
        let l:target = input('Build Target: ')
    endif

    if filereadable('vmake')
        :execute "!chmod +x vmake && ./vmake ".l:target
    elseif filereadable('CMakeLists.txt')
        :execute "!mkdir -p build && cd build && conan install .. --build missing ; cmake .. && cmake --build . -- -j8 ".l:target
    elseif filereadable('Makefile')
        :execute "!make ".l:target
    else
        let l:errmsg = 'build script is not found. aborting'
        echohl WarningMsg | echo l:errmsg  | echohl None
    endif
endfunc
nnoremap <silent> <F10> :call <SID>SmartBuild(0)<CR>
nnoremap <silent> <C-F10> :call <SID>SmartBuild(1)<CR>

func! s:SearchAndReplace()
    " Search And Replace recursively
    :wa

    let l:basedir = input('Base Directory: ')
    let l:sfrom = input('String From: ')
    let l:sto = input('String To: ')

    :execute 'args '.l:basedir.'**/*.{c,h}'
    :execute 'argdo %s/'.l:sfrom.'/'.l:sto.'/gc'
endfunc
nnoremap <leader>r :call <SID>SearchAndReplace()<CR>

func! s:KillAllBuffer()
    " Kill all opened buffers
    :wa

    let l:index = 0
    let l:buffer_count = len(filter(range(1, bufnr('$')), 'buflisted(v:val)'))
    while l:index < l:buffer_count
        :BD
        let l:index += 1
    endwhile
endfunc
nnoremap <leader>Z :call <SID>KillAllBuffer()<CR>

nnoremap <S-e> :Files<CR>

"Print current file path
nnoremap <leader>p :echo @%<CR>
"Print current file full-path
nnoremap <leader>P :echo expand('%:p')<CR>

nnoremap <TAB> :YcmCompleter GoTo<CR>
nnoremap <leader>q :YcmCompleter GetDoc<CR>
nnoremap <leader>f :YcmCompleter FixIt<CR>
nnoremap <leader>t :YcmCompleter GetType<CR>
nnoremap <C-o> <C-o>zz

nnoremap <leader>d :Dox<CR>
nnoremap <leader>n :ParseNumber<CR>
nnoremap <leader>j :CCTreeTraceForward<CR>
nnoremap <leader>J :CCTreeTraceReverse<CR>
nnoremap <leader>v :!tig<CR>


"Shortcuts :: Editor
nnoremap n nzz
nnoremap j gj
nnoremap k gk
nnoremap ; :
nnoremap _ zc
nnoremap + zo
nnoremap <leader>g :execute ":Ag ".expand("<cword>")<CR>
nnoremap <leader>e :bn<CR>
nnoremap <leader>w :bp<CR>
nnoremap <leader>z :BD<CR>
nnoremap <F12> <ESC><ESC>:wqa!<CR>
nnoremap <F8> :setlocal ts=8 sts=8 tw=8<CR>
nnoremap <F7> :setlocal spell! spelllang=en_us<CR>
nnoremap <BS> hx
inoremap <C-w> <C-o>de
inoremap <C-b> <C-o>db
vnoremap t :TransItBlock<CR>
vnoremap T :TransItBlockPut<CR>
nnoremap <Space> <C-w>w
nnoremap <silent> <leader><Space> :ToggleNumbering<CR>
nnoremap <C-l> :Lines<CR>

"Shortcuts :: External Utilties
nnoremap <F9> :!export VIMCHILD=1 && $SHELL<CR>

"A trick by Steve Losh for when you forgot to sudo before editing a file
"that requires root privileges (typically /etc/hosts).
"This lets you use w!! to do that after you opened the file already:
cmap w!! w !sudo tee % >/dev/null

