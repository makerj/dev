# setup fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# antigen installation. -------------------------------------------------------
source ~/antigen.zsh
antigen use oh-my-zsh
antigen theme ys

antigen bundle git
antigen bundle heroku
antigen bundle pip
antigen bundle lein
antigen bundle command-not-found
antigen bundle zsh-users/zsh-syntax-highlighting
antigen bundle zsh-users/zsh-autosuggestions
antigen bundle uvaes/fzf-marks

antigen apply

# Aliases ---------------------------------------------------------------------
alias c=clear
alias t=tmux
alias h=htop
alias q=exit
alias gitcommit='git add -A; git commit'
alias gitreset='git reset --hard'
alias gitclean='git reset --hard;git clean -fdx'
alias gitstatus='git status'
alias gitsubmodule='git submodule update --init --recursive'
alias gitc='git add -A; git commit --amend'
alias update='sudo apt update && sudo apt upgrade -y && sudo apt dist-upgrade -y && sudo apt autoremove -y && sudo apt autoclean -y'
alias lynx='lynx -vikeys '
export TERM="xterm-256color"	# To prevent the color scheme from crashing
								# when using tmux and vim at the same time

function cmakebuild() {
	(mkdir -p build && cd build && conan install --update .. --build missing)
	(cd build && cmake .. && cmake --build . -- VERBOSE=1 -j$(nproc) $@)
}

function gitpullall() {
	BASE=$(pwd)
	for PROJECT in $(find -maxdepth 2 -name ".git"); do
		cd $(dirname $PROJECT)
		git pull &
		cd $BASE
	done
	wait
}

function tags() {
	rm -f tags
	ctags --exclude="*.java" -R .
}

function gituser() {
	if (( $# < 1 )); then
		echo "Usage: gituser (junhui|makerj)"
	else
		if [[ "$1" == "junhui" ]]; then
			echo "Change Git User to 'junhui'"
			git config --global user.name "junhui"
			git config --global user.email "junhui@gurum.cc"
		elif [[ "$1" == "makerj" ]]; then
			echo "Change Git User to 'makerj'"
			git config --global user.name "makerj"
			git config --global user.email "ohenwkgdj@gmail.com"
		else
			echo "Unsupported Git username: $1"
		fi
	fi

	echo "- Current Git name:  $(git config --global user.name)"
	echo "- Current Git email: $(git config --global user.email)"
}

function vim_with_nesting_protection() {
	VIM_NEST_FLAG=$(echo $VIM_NEST | wc --chars)
	VIM_RUNNING=`ps | grep 'vim' | wc -l`
	if (( $VIM_NEST_FLAG < 2 )) && (( $VIM_RUNNING )); then
		echo "vim sessions should be nested with care, set \$VIM_NEST to force"
	else
		sh -c "vim $@"
	fi
}

function wifi-scan() {
	sudo iwlist scanning
}

function wifi-connect() {
	echo -n "WIFI NIC Name: "; read WIFI_NIC
	echo -n "WIFI Name:     "; read WIFI_NAME
	echo -n "WIFI Pass:     "; read -s WIFI_PASS

	sudo ifconfig "${WIFI_NIC}" 0 down; sleep 0.5
	sudo ifconfig "${WIFI_NIC}" up; sleep 0.5

	WIFI_CONFIG="/tmp/${RANDOM}${RANDOM}${RANDOM}${RANDOM}.wifi.conf"
	touch "$WIFI_CONFIG"
	chmod 0600 "$WIFI_CONFIG"
	echo "network={" >> "$WIFI_CONFIG"
	echo "    ssid=\"${WIFI_NAME}\"" >> "$WIFI_CONFIG"
	echo "    psk=\"${WIFI_PASS}\"" >> "$WIFI_CONFIG"
	echo "}" >> "$WIFI_CONFIG"

	sudo wpa_supplicant -B -i"${WIFI_NIC}" -c"${WIFI_CONFIG}" -Dwext
	rm -f "$WIFI_CONFIG"

	sudo dhclient "${WIFI_NIC}"
}

function perf-svg() {
	SVG_DATA_PATH="/tmp/perf.svgdata.${RANDOM}${RANDOM}${RANDOM}"
	sudo perf script -f | ~/FlameGraph/stackcollapse-perf.pl > "$SVG_DATA_PATH"
	~/.FlameGraph/flamegraph.pl "$SVG_DATA_PATH" > perf.svg
}

alias v=vim_with_nesting_protection
alias vi=vim_with_nesting_protection
alias vim=vim_with_nesting_protection

# Credentials -----------------------------------------------------------------
if [ -e ~/.zshrc-credential ]; then
	source ~/.zshrc-credential
fi

if (( $VIMCHILD )); then
	export PS1="(vim-shell) $PS1"
fi
